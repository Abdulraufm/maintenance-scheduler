maintenance-scheduler/

+-- backend/

¦   +-- server.js
¦   const express = require("express");

const mongoose = require("mongoose");

const nodemailer = require("nodemailer");

const cron = require("node-cron");

const cors = require("cors");

require("dotenv").config();



const app = express();

app.use(express.json());

app.use(cors());



mongoose.connect(process.env.MONGO_URI, {

  useNewUrlParser: true,

  useUnifiedTopology: true,

});



const assetSchema = new mongoose.Schema({

  name: String,

  ownerEmail: String,

  maintenanceDate: Date,

})
;
const Asset = mongoose.model("Asset", assetSchema);



const transporter = nodemailer.createTransport({

  service: "gmail",

  auth: {

    user: process.env.Abdulraufm,

    pass: process.env.Github_94,

  },

});


// Cron job untuk hantar email sebelum tarikh maintenance

cron.schedule("0 8 * * *", async () => {

  const today = new Date();

  const nextWeek = new Date();

  nextWeek.setDate(today.getDate() + 7);

  const assets = await Asset.find({ maintenanceDate: { $lte: nextWeek, $gte: today } });


  
  assets.forEach((asset) => {

    transporter.sendMail({

      from: process.env.EMAIL_USER,

      to: asset.ownerEmail,

      subject: "Maintenance Reminder",

      text: Your asset "${asset.name}" needs maintenance before ${asset.maintenanceDate}.,

    });

  });

});



app.post("/addAsset", async (req, res) => {

  const newAsset = new Asset(req.body);

  await newAsset.save();

  res.send("Asset added!");

});



app.get("/assets", async (req, res) => {

  const assets = await Asset.find();

  res.json(assets);

});



app.listen(3000, () => console.log("Server running on port 3000"));
¦   +-- package.json

+-- frontend/

¦   +-- src/

¦   ¦   +-- App.js

¦import React, { useState, useEffect } from "react";

import axios from "axios";



function App() {

  const [assets, setAssets] = useState([]);



  useEffect(() => {

    axios.get("http://localhost:3000/assets").then((response) => {

      setAssets(response.data);

    });

  }, []);



  return (

    <div>

      <h1>Asset Maintenance Schedule</h1>

      <ul>
        {assets.map((asset) => (

          <li key={asset._id}>

            {asset.name} - {new Date(asset.maintenanceDate).toLocaleDateString()}

          </li>

        ))}

      </ul>

    </div>

  );

}



export default App;
¦   +-- package.json